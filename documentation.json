{
    "pipes": [],
    "interfaces": [
        {
            "name": "IBaseView",
            "id": "interface-IBaseView-5b93aae0198dca114dd54aebf2d8e7a81482208a30ef42e7d1fe210fc70ed8263827ddf4b960b5bca5600f04b10b8fdea91ff73709090c864f3531e8c93aba75",
            "file": "projects/zambon-lib/src/lib/interfaces/ibase-view.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, QueryList } from '@angular/core';\n\nexport interface IBaseView {\n    \n    currentUrl: string;\n    entityId?: number;\n    \n    title?: string;\n\n    titleUpdated: EventEmitter<void>;\n\n    get formDisabled(): boolean;\n    \n    \n    initTab(): Promise<void>\n\n    refresh(): Promise<void>;\n\n    refreshModel(model?: any): Promise<void>;\n\n    isValid(): boolean;\n\n    showValidation(): void;\n\n    disableForm(): void;\n\n    saveView(): Promise<any>;\n}",
            "properties": [
                {
                    "name": "currentUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "titleUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "disableForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTab",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshModel",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "RouteStorageObject",
            "id": "interface-RouteStorageObject-51faefb6e407bdd830bdd53b4329adde381c9a84c468ee9f570fdc649dc8aa71c36540d2f97416923714aaf0a886947f4e654ef099e3630e95399a204fa5d646",
            "file": "projects/zambon-lib/src/lib/routes/custom-reuse-strategy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\n\ninterface RouteStorageObject {\n    snapshot: ActivatedRouteSnapshot;\n    handle: DetachedRouteHandle | null;\n}\n\nexport class CustomReuseStrategy implements RouteReuseStrategy {\n    \n    private storedRoutes: { [key: string]: RouteStorageObject } = {};\n    \n\n    shouldDetach(route: ActivatedRouteSnapshot): boolean {\n        const routePath = this.getFullRoute(route);\n        if (route.component && this.storedRoutes[routePath]) {\n            return true;\n        }\n        return false;\n    }\n\n    store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle | null): void {\n        const routePath = this.getFullRoute(route);\n        if (route.component && this.storedRoutes[routePath]) {\n            this.storedRoutes[routePath].snapshot = route;\n            this.storedRoutes[routePath].handle = handle;\n        }\n    }\n\n    shouldAttach(route: ActivatedRouteSnapshot): boolean {\n        const routePath = this.getFullRoute(route);\n        if (route.component && this.storedRoutes[routePath] && this.storedRoutes[routePath].handle) {\n            return true;\n        }\n        return false;\n    }\n\n    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n        const routePath = this.getFullRoute(route);\n        if (route.component && this.storedRoutes[routePath]) {\n            return this.storedRoutes[routePath].handle;\n        }\n        return null;\n    }\n\n    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n        const futureRoute = this.getFullRoute(future);\n        const currRoute = this.getFullRoute(curr);\n        return future.routeConfig === curr.routeConfig && futureRoute === currRoute;\n    }\n\n\n    private getFullRoute(route: ActivatedRouteSnapshot): string {\n        let parentRoute = '';\n        if (route.parent) {\n            parentRoute = this.getFullRoute(route.parent);\n            if (parentRoute !== '' && route.routeConfig?.path) {\n                parentRoute += '/';\n            }\n        }\n\n        let path = route.routeConfig?.path ?? '';\n        route.paramMap.keys.forEach(k => {\n            path = path.replace(':' + k, route.paramMap.get(k) ?? '');\n        });\n\n        return parentRoute + path;\n    }\n\n    public storeNewRoute(route: string): void {\n        let newStoredRoute: RouteStorageObject = {\n            snapshot: new ActivatedRouteSnapshot(),\n            handle: null\n        };\n        this.storedRoutes[route] = newStoredRoute;\n    }\n\n    public redirectRoute(oldUrl: string, newUrl: string) {\n        const route = this.storedRoutes[oldUrl];\n        this.storedRoutes[newUrl] = route;\n    }\n\n    public removeRoute(route: string): void {\n        delete this.storedRoutes[route];\n    }\n}",
            "properties": [
                {
                    "name": "handle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DetachedRouteHandle | null",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "snapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRouteSnapshot",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TabService",
            "id": "injectable-TabService-ecb191e1ea9c6920e0bcab089178d22bc9b202370cd33f8ef292336099cac4deea46ca35e70a2e8ba65197cbeb828c14e16275b9c2ac89678bc1bfd8ff48a7ee",
            "file": "projects/zambon-lib/src/lib/services/tab.service.ts",
            "properties": [
                {
                    "name": "_activeTab",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tab | null",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_openTabs",
                    "defaultValue": "new Array<Tab>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabClosed",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tabOpened",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tabRedirected",
                    "defaultValue": "new EventEmitter<{ oldUrl: string, newUrl: string }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearChangedValues",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeAllTabs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeCurrentTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disableTabForm",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTab",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Tab",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isOpen",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTabFormDisabled",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTabValid",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openView",
                    "args": [
                        {
                            "name": "view",
                            "type": "IBaseView",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "IBaseView",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectTab",
                    "args": [
                        {
                            "name": "oldUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "oldUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshTabModel",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveTab",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setChangedValues",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showTabValidation",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { IBaseView } from '../interfaces/ibase-view';\nimport { Tab } from '../models/tab';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TabService {\n    private _activeTab: Tab | null = null;\n    private _openTabs = new Array<Tab>();\n\n    public get openTabs(): Array<Tab> {\n        return this._openTabs;\n    }\n    public set openTabs(value: Array<Tab>) {\n        this._openTabs = value;\n    }\n\n    public get activeTab(): Tab | null {\n        return this._activeTab;\n    }\n\n    public get hasChangedTab(): boolean {\n        return this._openTabs.filter(x => x.changedValues).length > 0;\n    }\n\n\n    public tabOpened = new EventEmitter<string>();\n    public tabRedirected = new EventEmitter<{ oldUrl: string, newUrl: string }>();\n    public tabClosed = new EventEmitter<string>();\n\n    constructor(private router: Router) { }\n\n\n    \n    isOpen(url: string): boolean {\n        return this.openTabs.some(x => x.url === url);\n    }\n\n    getTab(url: string): Tab {\n        return this.openTabs.filter(x => x.url === url)[0];\n    }\n\n\n    openUrl(url: string): void {\n        let tab: Tab;\n\n        if (!this.isOpen(url)) {\n            tab = new Tab();\n            tab.url = url;\n\n            this.openTabs.push(tab);\n            this.tabOpened.emit(url);\n        }\n        else {\n            tab = this.getTab(url);\n        }\n            \n        this.setTabActive(tab);\n    }\n\n    openView(view: IBaseView, url: string): void {\n        let tab: Tab;\n\n        if (!this.isOpen(url)) {\n            tab = new Tab();\n            tab.url = url;\n\n            this.openTabs.push(tab);\n            this.tabOpened.emit(url);\n        }\n        else {\n            tab = this.getTab(url);\n        }\n\n        if (tab.view) {\n            //tab.view.titleUpdated.unsubscribe();\n        }\n\n        tab.view = view;\n        tab.view.titleUpdated.subscribe(x => tab?.updatePosition());\n        \n        setTimeout(() => {\n            tab.view.currentUrl = tab.url;\n        });\n\n        this.setTabActive(tab);\n    }\n\n    setTabActive(tab: Tab | null): void {\n        if (this.activeTab) {\n            this._activeTab = null;\n        }\n        \n        if (tab) {\n            this._activeTab = tab;\n            this._activeTab.updatePosition();\n\n            this.router.navigate([tab.url]);\n        }\n        else {\n            this.router.navigate(['/']);\n        }\n    }\n\n\n    isTabValid(url: string): boolean {\n        const tab = this.getTab(url);\n        if (tab && tab.view) {\n            return tab.view.isValid();\n        }\n        return false;\n    }\n\n    isTabFormDisabled(url: string) : boolean {\n        const tab = this.getTab(url);\n        if (tab && tab.view) {\n            return tab.view.formDisabled;\n        }\n        return false;\n    }\n\n\n    refreshTabModel(url: string, model?: any) {\n        const tab = this.getTab(url);\n        if (tab && tab.view) {\n            tab.view.refreshModel(model);\n        }\n    }\n\n    redirectTab(oldUrl: string, newUrl: string): void {\n        const tab = this.getTab(oldUrl);\n        if (tab) {\n            tab.url = newUrl;\n            tab.view.currentUrl = newUrl;\n            this.tabRedirected.emit({oldUrl: oldUrl, newUrl: newUrl});\n            this.router.navigate([newUrl]);\n        }\n    }\n\n    showTabValidation(url: string): void {\n        const tab = this.getTab(url);\n        if (tab && tab.view) {\n            return tab.view.showValidation();\n        }\n    }\n\n    disableTabForm(url: string): void {\n        const tab = this.getTab(url);\n        if (tab && tab.view) {\n            return tab.view.disableForm();\n        }\n    }\n\n    async saveTab(url: string): Promise<any> {\n        const tab = this.getTab(url);\n        if (tab && tab.view) {\n            return await tab.view.saveView();\n        }\n    }\n\n\n    closeTab(tab: Tab): void {\n\n        if (tab.view) {\n            tab.view.titleUpdated.unsubscribe();\n        }\n\n        const index = this.openTabs.indexOf(tab);\n        if (index > -1) {\n            this.openTabs.splice(index, 1);\n            this.tabClosed.emit(tab.url);\n\n            if (this.openTabs.length <= 0) {\n                this.setTabActive(null);\n            }\n            else if (tab === this.activeTab) {\n                if (index >= this.openTabs.length) {\n                    this.setTabActive(this.openTabs[this.openTabs.length - 1]);\n                }\n                else {\n                    this.setTabActive(this.openTabs[index]);\n                }\n            }\n            \n            if (this.activeTab) {\n                this.activeTab.updatePosition();\n            }\n        }\n    }\n\n    closeAllTabs(): void {\n        this.openTabs = new Array<Tab>();\n        this._activeTab = null;\n    }\n\n    closeCurrentTab(): void {\n        const url = this.router.url.substring(1, this.router.url.length);\n        const tab = this.getTab(url);\n        if (tab) {\n            this.closeTab(tab);\n        }\n    }\n\n\n    \n\n\n    setChangedValues(url: string): void {\n        const tab = this.getTab(url);\n        if (tab && !tab.changedValues) {\n            tab.changedValues = true;\n            tab.updatePosition();\n        }\n    }\n\n    clearChangedValues(url: string): void {\n        const tab = this.getTab(url);\n        if (tab && tab.changedValues) {\n            tab.changedValues = false;\n            tab.updatePosition();\n        }\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "openTabs": {
                    "name": "openTabs",
                    "setSignature": {
                        "name": "openTabs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Array<Tab>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Array<Tab>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "openTabs",
                        "type": "",
                        "returnType": "Array<Tab>",
                        "line": 14
                    }
                },
                "activeTab": {
                    "name": "activeTab",
                    "getSignature": {
                        "name": "activeTab",
                        "type": "",
                        "returnType": "Tab | null",
                        "line": 21
                    }
                },
                "hasChangedTab": {
                    "name": "hasChangedTab",
                    "getSignature": {
                        "name": "hasChangedTab",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CustomReuseStrategy",
            "id": "class-CustomReuseStrategy-51faefb6e407bdd830bdd53b4329adde381c9a84c468ee9f570fdc649dc8aa71c36540d2f97416923714aaf0a886947f4e654ef099e3630e95399a204fa5d646",
            "file": "projects/zambon-lib/src/lib/routes/custom-reuse-strategy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\n\ninterface RouteStorageObject {\n    snapshot: ActivatedRouteSnapshot;\n    handle: DetachedRouteHandle | null;\n}\n\nexport class CustomReuseStrategy implements RouteReuseStrategy {\n    \n    private storedRoutes: { [key: string]: RouteStorageObject } = {};\n    \n\n    shouldDetach(route: ActivatedRouteSnapshot): boolean {\n        const routePath = this.getFullRoute(route);\n        if (route.component && this.storedRoutes[routePath]) {\n            return true;\n        }\n        return false;\n    }\n\n    store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle | null): void {\n        const routePath = this.getFullRoute(route);\n        if (route.component && this.storedRoutes[routePath]) {\n            this.storedRoutes[routePath].snapshot = route;\n            this.storedRoutes[routePath].handle = handle;\n        }\n    }\n\n    shouldAttach(route: ActivatedRouteSnapshot): boolean {\n        const routePath = this.getFullRoute(route);\n        if (route.component && this.storedRoutes[routePath] && this.storedRoutes[routePath].handle) {\n            return true;\n        }\n        return false;\n    }\n\n    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n        const routePath = this.getFullRoute(route);\n        if (route.component && this.storedRoutes[routePath]) {\n            return this.storedRoutes[routePath].handle;\n        }\n        return null;\n    }\n\n    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n        const futureRoute = this.getFullRoute(future);\n        const currRoute = this.getFullRoute(curr);\n        return future.routeConfig === curr.routeConfig && futureRoute === currRoute;\n    }\n\n\n    private getFullRoute(route: ActivatedRouteSnapshot): string {\n        let parentRoute = '';\n        if (route.parent) {\n            parentRoute = this.getFullRoute(route.parent);\n            if (parentRoute !== '' && route.routeConfig?.path) {\n                parentRoute += '/';\n            }\n        }\n\n        let path = route.routeConfig?.path ?? '';\n        route.paramMap.keys.forEach(k => {\n            path = path.replace(':' + k, route.paramMap.get(k) ?? '');\n        });\n\n        return parentRoute + path;\n    }\n\n    public storeNewRoute(route: string): void {\n        let newStoredRoute: RouteStorageObject = {\n            snapshot: new ActivatedRouteSnapshot(),\n            handle: null\n        };\n        this.storedRoutes[route] = newStoredRoute;\n    }\n\n    public redirectRoute(oldUrl: string, newUrl: string) {\n        const route = this.storedRoutes[oldUrl];\n        this.storedRoutes[newUrl] = route;\n    }\n\n    public removeRoute(route: string): void {\n        delete this.storedRoutes[route];\n    }\n}",
            "properties": [
                {
                    "name": "storedRoutes",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFullRoute",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectRoute",
                    "args": [
                        {
                            "name": "oldUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "oldUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeRoute",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DetachedRouteHandle | null",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldAttach",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldDetach",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldReuseRoute",
                    "args": [
                        {
                            "name": "future",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "curr",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "future",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "curr",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "store",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "handle",
                            "type": "DetachedRouteHandle | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handle",
                            "type": "DetachedRouteHandle | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "storeNewRoute",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RouteReuseStrategy"
            ]
        },
        {
            "name": "MenuItem",
            "id": "class-MenuItem-eb573608474890945a20e3fb22aa9b421f88bfb7b683ff582dcdfe7d2c0236dd6b72e08f5d1aee4ef0ab4bbf96f0b1c8cc942a954cc88b4b4d13a60158ae5003",
            "file": "projects/zambon-lib/src/lib/models/menu-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class MenuItem {\n    parent: MenuItem | null = null;\n    \n    linkActive: boolean = false;\n    selected: boolean = false;\n    floatMenuState: 'opening' | 'show' | 'closing' | 'hide' | '' = '';\n\n    id!: number;\n\n    icon!: string;\n    label!: string;\n    url!: string | undefined;\n\n    children: MenuItem[] = new Array<MenuItem>();\n\n\n    public getRootNode(): MenuItem {\n        return (this.parent)\n            ? this.parent.getRootNode()\n            : this;\n    }\n}",
            "properties": [
                {
                    "name": "children",
                    "defaultValue": "new Array<MenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "floatMenuState",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"opening\" | \"show\" | \"closing\" | \"hide\" | string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "linkActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "parent",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem | null",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "getRootNode",
                    "args": [],
                    "optional": false,
                    "returnType": "MenuItem",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Tab",
            "id": "class-Tab-1cc47b0f1280bdfbe92ea2ddc0a04c141f7a128c70343a99382b5194bae81a5ac66d3ef032f48142190e2b52b923e0c7d623795a9f1f37a548ac1c222e40c1dc",
            "file": "projects/zambon-lib/src/lib/models/tab.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IBaseView } from '../interfaces/ibase-view';\nimport { EventEmitter } from '@angular/core';\n\nexport class Tab {\n    view!: IBaseView;\n    url!: string;\n    \n    x!: number;\n    width!: number;\n\n    changedValues = false;\n\n    updatedPosition = new EventEmitter();\n\n    updatePosition() {\n        setTimeout(() => {\n            this.updatedPosition.emit();\n        }, 10);\n    }\n}",
            "properties": [
                {
                    "name": "changedValues",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "updatedPosition",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "view",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IBaseView",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "updatePosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "TrackScrollDirective",
            "id": "directive-TrackScrollDirective-bf84ab4dcbbc782d94008a19d91370e6c21eccba8821672bf4a23b1d6ef6b9f7164f14bbee78ab548398efc85e9c5fd9411932bf1f33e1f55d9dde5ac3eab186",
            "file": "projects/zambon-lib/src/lib/directives/track-scroll.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, Output } from '@angular/core';\n\n@Directive({\n    selector: '[zambon-lib-track-scroll]'\n})\nexport class TrackScrollDirective {\n\n    @Output() scrolled = new EventEmitter<number>();\n\n    constructor() { }\n\n    track($event: Event) {\n        this.scrolled.emit(($event.target as HTMLElement).scrollTop);\n    }\n}",
            "selector": "[zambon-lib-track-scroll]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "scrolled",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "track",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            }
        }
    ],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CloseTabModalComponent",
            "id": "component-CloseTabModalComponent-61d324fb9b3ad325e2f0f8a9a9b537efa411e8e5a26ea3799ce9559bfc191e64d9bf5384bfcc8c8458dc0c82d4058585706e9ddb606d455de51cb58910d5c5dc",
            "file": "projects/zambon-lib/src/lib/components/tabs/close-tab-modal/close-tab-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "zambon-lib-close-tab-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./close-tab-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "confirmLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<Tab>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Modal",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "modalElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modal'"
                        }
                    ]
                },
                {
                    "name": "tab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tab",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { Modal } from 'bootstrap';\n\nimport { Tab } from '../../../models/tab';\n\n@Component({\n    selector: 'zambon-lib-close-tab-modal',\n    templateUrl: './close-tab-modal.component.html'\n})\nexport class CloseTabModalComponent implements OnInit {\n\n    @Input() title!: string;\n    @Input() message!: string;\n    @Input() cancelLabel!: string;\n    @Input() confirmLabel!: string;\n\n    @ViewChild('modal') modalElement!: ElementRef<HTMLDivElement>;\n    modal!: Modal;\n    tab!: Tab;\n\n    @Output() close = new EventEmitter<Tab>();\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit(): void {\n        this.modal = new Modal(this.modalElement.nativeElement);\n    }\n\n\n    show(tab: Tab): void {\n        this.tab = tab;\n        this.modal.show();\n    }\n\n    confirmClick(): void {\n        this.close.emit(this.tab);\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div #modal class=\"modal fade\" id=\"closeModal\" tabindex=\"-1\" aria-hidden=\"true\" aria-hidden=\"true\" role=\"dialog\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-body\">\n                <h5 class=\"mb-2\">{{ title }}</h5>\n                <h6>{{ message }}</h6>\n            </div>\n\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{ cancelLabel }}</button>\n                <button type=\"button\" class=\"btn btn-danger\" data-bs-dismiss=\"modal\" (click)=\"confirmClick()\">{{ confirmLabel }}</button>\n            </div>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoginInputComponent",
            "id": "component-LoginInputComponent-cf22f77abf700d2f388d13c30c60e13ea3ff69e742a20f5d2e733bc151f9e21636a614c959bc301a4ed1f8693b1c9c856c8a5f5863688c2c449099014feeb719",
            "file": "projects/zambon-lib/src/lib/components/login/login-input/login-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "zambon-lib-login-input",
            "styleUrls": [
                "./login-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "controlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isInvalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "themeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"text\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'zambon-lib-login-input',\n    host: { '[class]' : 'themeName' },\n    templateUrl: './login-input.component.html',\n    styleUrls: ['./login-input.component.scss']\n})\nexport class LoginInputComponent implements OnInit {\n\n    @Input() formGroup!: FormGroup;\n\n    @Input() controlName!: string;\n\n    @Input() type: string = \"text\";\n    @Input() icon: string = '';\n    @Input() placeholder: string = '';\n    @Input() themeName?: string;\n\n    @Input() isInvalid: boolean = false;\n\n    @HostBinding('attr.autofocus') @Input() autofocus: boolean = false;\n\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/mixins/login/login-input\";\r\n\r\n@include login-input();\r\n\r\n.form-control {\r\n    border-left: 0;\r\n}",
                    "styleUrl": "./login-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"input-group\" [formGroup]=\"formGroup\">\n    <span class=\"input-group-text\"\n        [class.is-invalid]=\"isInvalid\"\n        [class.border-danger]=\"isInvalid\"\n        [class.bg-danger]=\"isInvalid\"\n    >\n        <label [for]=\"controlName\" *ngIf=\"icon !== ''\">\n            <i class=\"fas fa-{{icon}} fa-fw\"></i>\n        </label>\n    </span>\n\n    <input class=\"form-control rounded-end\"\n        [type]=\"type\"\n        [class.is-invalid]=\"isInvalid\"\n        [class.border-danger]=\"isInvalid\"\n        [placeholder]=\"placeholder\"\n        [id]=\"controlName\"\n        [formControlName]=\"controlName\"\n        [autofocus]=\"autofocus\"\n    />\n\n    <div [class.d-none]=\"!isInvalid\" class=\"invalid-feedback\">\n        <ng-content select=\"[validations]\"></ng-content>\n    </div>\n</div>"
        },
        {
            "name": "LoginInputStoryComponent",
            "id": "component-LoginInputStoryComponent-26146032ec049718b5f44baaf27566b5cf0def8119a1574d51f3b25f376c998dcae017d20c8ba8d677b8be5c62215531d1f72afd57d9a921932361e9b3ff665c",
            "file": "stories/login/login-input-story.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-login-input",
            "styleUrls": [
                "./login-input-story.component.scss"
            ],
            "styles": [],
            "template": "<zambon-lib-login-input    [formGroup]=\"form\"\n    [controlName]=\"'component'\"\n    [type]=\"type\"\n    [icon]=\"icon\"\n    [placeholder]=\"placeholder\"\n    [themeName]=\"theme\"\n    [isInvalid]=\"form.controls['component'].invalid && (form.controls['component'].dirty || form.controls['component'].touched)\"\n  >\n    <div validations>\n      <div [class.d-none]=\"!form.controls['component'].errors?.required\">This field is required</div>\n    </div>\n  </zambon-lib-login-input>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "\"default\" | \"danger\" | \"warning\" | \"success\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'storybook-login-input',\n  template: `<zambon-lib-login-input\n    [formGroup]=\"form\"\n    [controlName]=\"'component'\"\n    [type]=\"type\"\n    [icon]=\"icon\"\n    [placeholder]=\"placeholder\"\n    [themeName]=\"theme\"\n    [isInvalid]=\"form.controls['component'].invalid && (form.controls['component'].dirty || form.controls['component'].touched)\"\n  >\n    <div validations>\n      <div [class.d-none]=\"!form.controls['component'].errors?.required\">This field is required</div>\n    </div>\n  </zambon-lib-login-input>`,\n  styleUrls: [ './login-input-story.component.scss' ]\n})\nexport default class LoginInputStoryComponent {\n  form!: FormGroup;\n  \n  @Input()\n  type: string = 'text';\n  \n  @Input()\n  icon: string = '';\n  \n  @Input()\n  placeholder: string = '';\n\n  @Input()\n  theme: 'default' | 'danger' | 'warning' | 'success' = 'default';\n\n  constructor(private formBuilder: FormBuilder) {\n    this.form = this.formBuilder.group({\n      component: ['', Validators.required]\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../projects/zambon-lib/src/assets/styles/mixins/login/login-input';\r\n\r\n@include login-input-theme('danger', $background-color: darkred);\r\n@include login-input-theme('warning', $background-color: orange);\r\n@include login-input-theme('success', $background-color: green);",
                    "styleUrl": "./login-input-story.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LoginLanguageDropdownComponent",
            "id": "component-LoginLanguageDropdownComponent-86a4fb8fe8afc7fd05f66385260d916cb514a8e59585da5d27d8d4007f69e328307eda4bde403c7afcca2ca0b34cd273496510c95b5b34cdf153f23169c79350",
            "file": "projects/zambon-lib/src/lib/components/login/login-language-dropdown/login-language-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "zambon-lib-login-language-dropdown",
            "styleUrls": [
                "./login-language-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-language-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "languagePrefix",
                    "defaultValue": "'SelectLanguage-'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "themeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'SelectLanguage-Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dropdown",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "dropdownElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLButtonElement>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdown'"
                        }
                    ]
                },
                {
                    "name": "languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dropdownClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemClick",
                    "args": [
                        {
                            "name": "selectedLanguage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedLanguage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Dropdown } from 'bootstrap';\n\n@Component({\n  selector: 'zambon-lib-login-language-dropdown',\n  host: { '[class]' : 'themeName' },\n  templateUrl: './login-language-dropdown.component.html',\n  styleUrls: ['./login-language-dropdown.component.scss']\n})\nexport class LoginLanguageDropdownComponent implements OnInit {\n\n    @ViewChild('dropdown') dropdownElement!: ElementRef<HTMLButtonElement>;\n    dropdown!: Dropdown;\n\n    languages!: string[];\n\n    @Input() title: string = 'SelectLanguage-Title';\n    @Input() languagePrefix: string = 'SelectLanguage-';\n    @Input() themeName?: string;\n\n    constructor(public translate: TranslateService) {\n        this.languages = this.translate.getLangs();\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit(): void {\n        this.dropdown = new Dropdown(this.dropdownElement.nativeElement);\n    }\n\n    dropdownClick(): void {\n        this.dropdown.toggle();\n    }\n\n    itemClick(selectedLanguage: string): void {\n        this.translate.use(selectedLanguage);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/mixins/login/language-dropdown\";\r\n@import \"../../../../assets/styles/mixins/flags\";\r\n\r\n@include language-dropdown();\r\n\r\n.dropdown-toggle {\r\n    .flag {\r\n        background-position: 0em 0.7em;\r\n        padding: 0.5rem 0rem 0.5rem 1.5rem !important;\r\n        background-size: 18px 18px;\r\n    }\r\n}\r\n\r\n.dropdown-menu {\r\n    background-color: transparent;\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 0.95rem;\r\n    overflow: hidden;\r\n\r\n    .background {\r\n        background-position: -10px -40px;\r\n\r\n        &:before {\r\n            filter: blur(5px);\r\n        }\r\n    }\r\n\r\n    .dropdown-item {\r\n        font-weight: 400;\r\n        cursor: pointer;\r\n        \r\n        &.flag {\r\n            background-position: 1.2em 0.5em;\r\n            padding: 0.5rem 3rem 0.5rem 3.7rem !important;\r\n        }\r\n        &.selected {\r\n            &:after {\r\n                position: absolute;\r\n                right: 10px;\r\n                padding-top: 2px;\r\n                \r\n                content: '\\f00c';\r\n                font-family: \"Font Awesome 5 Free\";\r\n                font-size: 0.8rem;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n.flag {\r\n    background-repeat: no-repeat;\r\n    background-size: 24px 24px;\r\n    min-height: 2rem;\r\n    \r\n    &.flag-pt {\r\n        @include flags('pt');\r\n    }\r\n    \r\n    &.flag-en {\r\n        @include flags('en');\r\n    }\r\n    \r\n    &.flag-es {\r\n        @include flags('es');\r\n    }\r\n    \r\n    *.flag-it {\r\n        @include flags('it');\r\n    }\r\n    \r\n    *.flag-de {\r\n        @include flags('de');\r\n    }\r\n}",
                    "styleUrl": "./login-language-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dropdown\">\n    <button #dropdown class=\"btn btn-language dropdown-toggle\" type=\"button\" id=\"dropdownLanguages\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" (click)=\"dropdownClick()\">\n        <span class=\"flag flag-{{ translate.currentLang }}\">{{title | translate}}</span>\n    </button>\n\n    <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"dropdownLanguages\">\n        <div class=\"background\"></div>\n    \n        <li *ngFor=\"let lang of languages\">\n            <a class=\"dropdown-item flag flag-{{lang}}\"\n                [ngClass]=\"{'selected': lang === translate.currentLang}\"\n                (click)=\"itemClick(lang)\"\n            >\n                {{languagePrefix + lang | translate}}\n            </a>\n        </li>\n    </ul>\n</div>"
        },
        {
            "name": "LoginLanguageInputDropdownStoryComponent",
            "id": "component-LoginLanguageInputDropdownStoryComponent-ddb66561e85d11fb028e43424d3babdadb2e322049e960d4bb982bc09df4ccd247cdd36ab7273eeb138b663db28e458bca955d3dcf000aee9f6f5ea6e9db7989",
            "file": "stories/login/login-language-dropdown-story.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-login-input",
            "styleUrls": [
                "./login-language-dropdown-story.component.scss"
            ],
            "styles": [],
            "template": "<zambon-lib-login-language-dropdown [themeName]=\"theme\">  </zambon-lib-login-language-dropdown>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "\"default\" | \"danger\" | \"warning\" | \"success\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'storybook-login-input',\n  template: `<zambon-lib-login-language-dropdown [themeName]=\"theme\">\n  </zambon-lib-login-language-dropdown>`,\n  styleUrls: [ './login-language-dropdown-story.component.scss' ]\n})\nexport default class LoginLanguageInputDropdownStoryComponent {\n  @Input()\n  type: string = 'text';\n  \n  @Input()\n  icon: string = '';\n  \n  @Input()\n  placeholder: string = '';\n\n  @Input()\n  theme: 'default' | 'danger' | 'warning' | 'success' = 'default';\n\n  constructor() {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../projects/zambon-lib/src/assets/styles/mixins/login/language-dropdown';\r\n\r\n@include language-dropdown-theme('danger', $item-active-background-color: darkred);\r\n@include language-dropdown-theme('warning', $item-active-background-color: orange);\r\n@include language-dropdown-theme('success', $item-active-background-color: green);",
                    "styleUrl": "./login-language-dropdown-story.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            }
        },
        {
            "name": "NavigationDrawerComponent",
            "id": "component-NavigationDrawerComponent-e862a8830647358862901bf1888b81a703b2c06bb0cfde6ed003bf9045c8b53d0e824f6b855993e2d2c266823f4a5abe90ae8e679de103a3f618fdbcea757a73",
            "file": "projects/zambon-lib/src/lib/components/navigation/navigation-drawer/navigation-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "zambon-lib-navigation-drawer",
            "styleUrls": [
                "./navigation-drawer.component.scss",
                "./navigation-drawer.component-animations.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-drawer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoNavigate",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "menus",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "MenuItem[] | null",
                    "decorators": []
                },
                {
                    "name": "userDepartment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "SafeUrl",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "navigated",
                    "defaultValue": "new EventEmitter<MenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeRootNode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem | null",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "collapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentScroll",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firstOpened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLUListElement>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navMenu'"
                        }
                    ]
                },
                {
                    "name": "scrolling",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollingTimer",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout | null",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearSelection",
                    "args": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeFloatMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ]
                },
                {
                    "name": "getOffsetHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getOffsetTop",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menuClick",
                    "args": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectMenu",
                    "args": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ]
                },
                {
                    "name": "updateScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { SafeUrl } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\n\nimport { MenuItem } from '../../../models/menu-item';\n\n@Component({\n    selector: 'zambon-lib-navigation-drawer',\n    templateUrl: './navigation-drawer.component.html',\n    styleUrls: [\n        './navigation-drawer.component.scss',\n        './navigation-drawer.component-animations.scss'\n    ]\n})\nexport class NavigationDrawerComponent implements OnInit {\n\n    @Input() menus: MenuItem[] | null = null;\n\n    public firstOpened: boolean = true;\n    public collapsed: boolean = false;\n    public currentScroll: number = 0;\n\n    public scrolling: boolean = false;\n    private scrollingTimer: NodeJS.Timeout | null = null;\n\n    @Input() userName!: string;\n    @Input() userDepartment!: string;\n    @Input() userImage!: SafeUrl;\n    @Input() autoNavigate: boolean = true;\n\n    @ViewChild('navMenu') navMenu!: ElementRef<HTMLUListElement>;\n\n    @Output() navigated = new EventEmitter<MenuItem>();\n\n    private activeRootNode: MenuItem | null = null;\n\n    constructor(private router: Router) { }\n\n    ngOnInit(): void { \n    }\n\n\n    public async toggleState() {\n        if (this.activeRootNode?.floatMenuState === 'show') {\n            await this.clearSelection(this.activeRootNode);\n            this.activeRootNode = null;\n        }\n\n        this.collapsed = !this.collapsed;\n        this.firstOpened = false;\n    }\n\n\n    async menuClick(menu: MenuItem) {\n        await this.selectMenu(menu);\n\n        if (menu.url) {\n            if (this.autoNavigate) {\n                this.router.navigate([menu.url]);\n            } else {\n                this.navigated.emit(menu);\n            }\n\n            if (this.collapsed) {\n                this.closeFloatMenu();\n            }\n            //else if (this.activeRootNode) {\n            //    this.clearSelection(this.activeRootNode);\n            //}\n        }\n    }\n\n    private async clearSelection(menu: MenuItem): Promise<void> {\n        if (!(menu.parent) && menu.floatMenuState == 'show') {\n            menu.floatMenuState = 'closing';\n\n            await of(menu)\n                .pipe(\n                    delay(400),\n                    map(menu => {\n                        menu.floatMenuState = 'hide';\n                        return menu;\n                    }),\n                    delay(100),\n                    map(menu => {\n                        menu.floatMenuState = '';\n                        return;\n                    })\n                ).toPromise();\n        }\n\n        menu.selected = false;\n        menu = menu.children.filter(el => el.selected)[0];\n        if (menu) {\n            this.clearSelection(menu);\n        }\n        return;\n    }\n\n    private async selectMenu(menu: MenuItem): Promise<void> {\n        const rootNode = menu.getRootNode();\n\n        if (this.collapsed && menu.parent === null) {\n            if (this.activeRootNode?.floatMenuState === 'show') {\n                this.clearSelection(this.activeRootNode);\n\n                if (this.activeRootNode === menu) {\n                    this.activeRootNode = null;\n                    return;\n                }\n            }\n            else if (this.activeRootNode && this.activeRootNode !== menu) {\n                this.clearSelection(this.activeRootNode);\n            }\n\n            if (menu.children.length > 0) {\n                this.activeRootNode = menu;\n                this.activeRootNode.floatMenuState = 'opening';\n                this.activeRootNode.selected = true;\n                \n                return of(this.activeRootNode)\n                    .pipe(\n                        delay(400),\n                        map(menu => {\n                            menu.floatMenuState = 'show';\n                        })\n                    ).toPromise();\n            }\n        }\n        else {\n            if (this.activeRootNode) {\n                if (this.activeRootNode !== rootNode) {\n                    await this.clearSelection(this.activeRootNode);\n                }\n                else {\n                    let activeNode: MenuItem | null = this.activeRootNode;\n                    let menuNode = rootNode;\n\n                    while (activeNode) {\n                        if (activeNode === menu) {\n                            this.clearSelection(activeNode);\n\n                            if (activeNode === this.activeRootNode) {\n                                this.activeRootNode = null;\n                            }\n                            return;\n                        }\n                        else if (activeNode !== menuNode) {\n                            this.clearSelection(activeNode);\n                            break;\n                        }\n                        \n                        activeNode = activeNode.children.filter(el => el.selected)[0];\n\n                        menuNode = menuNode.children.filter(el => el.id == menu.id)[0]\n                                    ?? menuNode.children.filter(el => el.selected)[0];\n                    }\n                }\n            }\n        }\n        \n        this.activeRootNode = rootNode;\n        menu.selected = true;\n    }\n\n\n    public async closeFloatMenu() {\n        if (this.activeRootNode && this.activeRootNode.floatMenuState === 'show') {\n            await this.clearSelection(this.activeRootNode);\n        }\n    }\n\n\n    public getOffsetHeight(): number {\n        return this.navMenu.nativeElement.offsetHeight;\n    }\n\n    public getOffsetTop(): number {\n        return this.navMenu.nativeElement.offsetTop;\n    }\n\n    public updateScroll(event: number) {\n        this.currentScroll = event;\n        this.scrolling = true;\n\n        if(this.scrollingTimer) {\n            clearTimeout(this.scrollingTimer);\n        }\n\n        this.scrollingTimer = setTimeout(() => {\n            this.scrolling = false;\n            this.scrollingTimer = null;\n        }, 100);\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/mixins/navigation/navigation-drawer';\r\n@import '../../../../assets/styles/mixins/no-select';\r\n\r\n@include navigation-drawer();\r\n\r\n.menu {\r\n    .navbar-header {\r\n        .logo-container {\r\n            text-align: center;\r\n            position: relative;\r\n            height: 50px;\r\n\r\n            .logo-expanded, .logo-collapsed {\r\n                position: absolute;\r\n                left: 0;\r\n                top: 0;\r\n                height: 100%;\r\n\r\n                background-repeat: no-repeat;\r\n                background-position: center center;\r\n                background-size: contain;\r\n            }\r\n        }\r\n\r\n        .profile-container {\r\n            height: 48px;\r\n\r\n            .profile-picture {\r\n                -webkit-flex: 0 0 48px;\r\n                flex: 0 0 48px;\r\n\r\n                border-radius: 24px;\r\n                max-height: 48px;\r\n                margin-right: .7rem;\r\n                margin-left: .7rem;\r\n                overflow: hidden;\r\n                width: 48px;\r\n\r\n                @include no-select();\r\n    \r\n                img {\r\n                    width: 48px;\r\n                    height: 48px;\r\n                }\r\n            }\r\n            \r\n            .user-name, .user-department {\r\n                flex: 0 0 50%;\r\n                -webkit-flex: 0 0 50%;\r\n                font-size: .9rem;\r\n                \r\n                @include no-select();\r\n            }\r\n    \r\n            .user-name {\r\n                font-weight: bold;\r\n            }\r\n    \r\n            .user-department {\r\n                font-weight: 100;\r\n                font-size: .8rem;\r\n            }\r\n        }\r\n    }\r\n\r\n    .navbar-menu {\r\n        overflow-y: auto;\r\n\r\n        .nav {\r\n            z-index: 1;\r\n                \r\n            .background-fill {\r\n                z-index: -1;\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./navigation-drawer.component.scss"
                },
                {
                    "data": "@import \"../../../../assets/styles/variables/navigation.theme\";\r\n\r\n@import '../../../../assets/styles/mixins/navigation/navigation-drawer';\r\n@include navigation-drawer-set-size();\r\n\r\n/* Animations */\r\n@keyframes fadeout {\r\n    from { opacity: 1; }\r\n    to { opacity: 0; }\r\n}\r\n\r\n@keyframes fadein {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n}\r\n\r\n\r\n.menu {\r\n    /* Collapsed */\r\n    &.collapsed {\r\n        &:not(.first-opened) {\r\n            // animation-name: collapse;\r\n            animation-duration: $menu-animation-speed;\r\n            animation-timing-function: ease-in-out;\r\n\r\n            .logo-container {\r\n                .logo-expanded {\r\n                    animation: fadeout $opacity-animation-speed ease;\r\n                    animation-fill-mode: forwards;\r\n                }\r\n                .logo-collapsed {\r\n                    animation: fadein $opacity-animation-speed ease;\r\n                    animation-fill-mode: forwards;\r\n                }\r\n            }\r\n\r\n            .profile-container {\r\n                .user-name, .user-department {\r\n                    animation: fadeout $opacity-animation-speed ease;\r\n                    animation-fill-mode: forwards;\r\n                }\r\n            }\r\n        }\r\n\r\n        .logo-container {\r\n            .logo-expanded {\r\n                opacity: 0;\r\n            }\r\n        }\r\n\r\n        .profile-container {\r\n            .user-name, .user-department {\r\n                opacity: 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Expanded */\r\n    &.expanded {\r\n        &:not(.first-opened) {\r\n            // animation-name: expand;\r\n            animation-duration: $menu-animation-speed;\r\n            animation-timing-function: ease-in-out;\r\n\r\n            .logo-container {\r\n                .logo-expanded {\r\n                    animation: fadein $opacity-animation-speed ease;\r\n                    animation-fill-mode: forwards;\r\n                }\r\n                .logo-collapsed {\r\n                    animation: fadeout $opacity-animation-speed ease;\r\n                    animation-fill-mode: forwards;\r\n                }\r\n            }\r\n\r\n            .profile-container {\r\n                .user-name, .user-department {\r\n                    animation: fadein $opacity-animation-speed ease;\r\n                    animation-fill-mode: forwards;\r\n                }\r\n            }\r\n        }\r\n\r\n        .logo-container {\r\n            .logo-collapsed {\r\n                opacity: 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@media (max-width:768px) {\r\n    .menu {\r\n        transition: margin-left $menu-animation-speed ease-in-out;\r\n\r\n        &.collapsed {\r\n            margin-left: 0px;\r\n            padding-left: 0px;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./navigation-drawer.component-animations.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"menu h-100 mh-100 d-flex flex-column\"\n    [class.expanded]=\"!collapsed\"\n    [class.collapsed]=\"collapsed\"\n    [class.first-opened]=\"firstOpened\"\n    >\n    \n    <!--Header-->\n    <div class=\"navbar-header pt-2 pb-3 flex-shrink-0\">\n        <div class=\"logo-container replace-content d-flex justify-content-center mb-3\">\n            <div class=\"logo-expanded\"></div>\n            <div class=\"logo-collapsed\"></div>\n        </div>\n\n        <div class=\"profile-container d-flex flex-wrap flex-column\">\n            <div class=\"profile-picture\">\n                <img [src]=\"this.userImage\" />\n            </div>\n            <div class=\"user-name\">{{ this.userName }}</div>\n            <div class=\"user-department\">{{ this.userDepartment }}</div>\n        </div>\n    </div>\n\n    <div class=\"navbar-menu d-flex flex-column flex-grow-1\" #navMenu zambon-lib-track-scroll (scrolled)=\"updateScroll($event)\">\n        <ul class=\"nav flex-column flex-nowrap w-100 flex-grow-1\">\n    \n            <ng-container *ngIf=\"menus !== null\">\n                <ng-container *ngFor=\"let menu of menus\">\n                    <zambon-lib-navigation-item\n                    [parentCollapsed]=\"collapsed\"\n                        [parentScrolling]=\"scrolling\"\n                        [firstOpened]=\"firstOpened\"\n                        [menu]=\"menu\"\n                        [parentScroll]=\"currentScroll\"\n                        [parentOffsetTop]=\"getOffsetTop()\"\n                        [parentOffsetHeight]=\"getOffsetHeight()\"\n                        (menuClick)=\"menuClick($event)\"\n                        (closeFloatMenu)=\"closeFloatMenu()\"></zambon-lib-navigation-item>\n                </ng-container>\n            </ng-container>\n    \n            <li class=\"background-fill flex-grow-1\">\n                <div *ngIf=\"menus === null\" class=\"loading text-center pt-2\">\n                    <i class=\"spinner-border spinner-border-md\"></i>\n                </div>\n            </li>\n        </ul>\n    </div>\n</nav>"
        },
        {
            "name": "NavigationDrawerStoryComponent",
            "id": "component-NavigationDrawerStoryComponent-9cdf338f6c6d38483c7349e2a7e3885f1f37ef717eb00e55e76172a572d29468158a8aa877703a0447679e03eea2797a6599f6c1c8b67b9fc41c9d874e8eefd6",
            "file": "stories/navigation/navigation-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-navigation-drawer",
            "styleUrls": [
                "./navigation-drawer-story.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"d-flex box\">\n    <zambon-lib-navigation-drawer #navigation\n        [userName]=\"'Test'\"\n        [userDepartment]=\"'Test department'\"\n        [userImage]=\"null\"\n    >\n    </zambon-lib-navigation-drawer>\n\n    <div class=\"main d-flex flex-grow-1 flex-column\">\n        <div class=\"toolbar position-relative d-flex flex-shrink-0 p-2 align-items-center\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"toggleNavigation()\">\n                <i class=\"fas fa-bars\"></i>\n            </button>\n        </div>\n\n        <div class=\"container-fluid position-relative flex-grow-1 pt-3 pb-2\">\n        </div>\n    </div>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationDrawerComponent",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navigation'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createMenuItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "icon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "parent",
                            "type": "MenuItem | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "icon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "MenuItem | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "toggleNavigation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { create } from 'domain';\nimport { MenuItem, NavigationDrawerComponent } from 'projects/zambon-lib/src/public-api';\n\n@Component({\n  selector: 'storybook-navigation-drawer',\n  template: `\n    <div class=\"d-flex box\">\n        <zambon-lib-navigation-drawer #navigation\n            [userName]=\"'Test'\"\n            [userDepartment]=\"'Test department'\"\n            [userImage]=\"null\"\n        >\n        </zambon-lib-navigation-drawer>\n        \n        <div class=\"main d-flex flex-grow-1 flex-column\">\n            <div class=\"toolbar position-relative d-flex flex-shrink-0 p-2 align-items-center\">\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"toggleNavigation()\">\n                    <i class=\"fas fa-bars\"></i>\n                </button>\n            </div>\n\n            <div class=\"container-fluid position-relative flex-grow-1 pt-3 pb-2\">\n            </div>\n        </div>\n    </div>`,\n  styleUrls: [ './navigation-drawer-story.component.scss' ]\n})\nexport default class NavigationDrawerStoryComponent implements AfterViewInit {\n  @ViewChild('navigation') navigation!: NavigationDrawerComponent;\n  \n  constructor() {\n    \n  }\n\n  async ngAfterViewInit(): Promise<void> {\n    const home = this.createMenuItem(1, 'home', 'Home page', '');\n\n    const security = this.createMenuItem(2, 'user', 'Security');\n    security.children.push(this.createMenuItem(3, '', 'Users', '1', security));\n    security.children.push(this.createMenuItem(4, '', 'Roles', '2', security));\n    security.children.push(this.createMenuItem(5, '', 'Actions', '3', security));\n    \n    const reports = this.createMenuItem(6, 'file-alt', 'Reports');\n    reports.children.push(this.createMenuItem(7, '', 'Report A', '4', reports));\n    reports.children.push(this.createMenuItem(8, '', 'Report B', '5', reports));\n    reports.children.push(this.createMenuItem(9, '', 'Report C', '6', reports));\n    \n    this.navigation.menus = [\n        home,\n        security,\n        reports\n    ];\n  }\n\n\n  toggleNavigation() {\n    this.navigation.toggleState();\n  }\n\n  private createMenuItem(id: number, icon: string, label: string, url: string | undefined = undefined, parent: MenuItem | null = null) {\n      const menuItem = new MenuItem();\n\n      menuItem.id = id;\n      menuItem.icon = icon;\n      menuItem.label = label;\n      menuItem.url = url;\n\n      menuItem.parent = parent;\n\n      return menuItem;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../projects/zambon-lib/src/assets/styles/mixins/navigation/navigation-drawer';\r\n\r\n@include navigation-drawer-background(\r\n    '/assets/images/background.jpg'\r\n);\r\n\r\n@include navigation-drawer-logos(\r\n    '/assets/images/logo_menu_expanded.png',\r\n    '/assets/images/logo_menu_collapsed.png'\r\n);\r\n\r\n//If you require custom navigation size, use the following mixin\r\n// @include navigation-drawer-set-custom-size(\r\n//     300px,\r\n//     100px\r\n// );\r\n\r\n/*\r\n\r\nWorkarounds for story page\r\n\r\n*/\r\n.box {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    \r\n    .main {\r\n        overflow: hidden;\r\n\r\n        .toolbar {\r\n            border-bottom: 1px solid darken(white, 15%);\r\n            font-size: 0.9rem;\r\n            color: black;\r\n            z-index: 2;\r\n\r\n            box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.2), 0 3px 20px 0 rgba(0, 0, 0, 0.19);\r\n            -webkit-box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.2), 0 3px 20px 0 rgba(0, 0, 0, 0.19);\r\n            -moz-box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.2), 0 3px 20px 0 rgba(0, 0, 0, 0.19);\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./navigation-drawer-story.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "NavigationItemComponent",
            "id": "component-NavigationItemComponent-e61ed0bd3af5bbac08b0436b14e12f98abbe093e6301680bd118c21824bb4869ac942c613b0dd54ca00048abe1699588de8915f56cc096b76b770cc0ff7d9409",
            "file": "projects/zambon-lib/src/lib/components/navigation/navigation-item/navigation-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "zambon-lib-navigation-item",
            "styleUrls": [
                "./navigation-item.component.scss",
                "./navigation-item.component-animations.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "firstOpened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "level",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "MenuItem",
                    "decorators": []
                },
                {
                    "name": "parentCollapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "parentOffsetHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "parentOffsetTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "parentScroll",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "parentScrolling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeFloatMenu",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuClick",
                    "defaultValue": "new EventEmitter<MenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "navItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLLIElement>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navItem'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateHeight",
                    "args": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateMarginTop",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "calculateMaxHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subMenuClick",
                    "args": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subMenuCloseFloatMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ActivationEnd, Router } from '@angular/router';\n\nimport { MenuItem } from '../../../models/menu-item';\n\n@Component({\n    selector: 'zambon-lib-navigation-item',\n    templateUrl: './navigation-item.component.html',\n    styleUrls: [\n        './navigation-item.component.scss',\n        './navigation-item.component-animations.scss'\n    ]\n})\nexport class NavigationItemComponent implements OnInit {\n\n    @ViewChild('navItem') navItem!: ElementRef<HTMLLIElement>;\n\n    @Input() parentCollapsed!: boolean;\n    @Input() parentScrolling!: boolean;\n    @Input() firstOpened!: boolean;\n    @Input() level: number = 0;\n\n    @Input() parentOffsetTop!: number;\n    @Input() parentScroll: number = 0;\n    @Input() parentOffsetHeight!: number;\n    \n    @Input() menu!: MenuItem;\n\n    @Output() menuClick = new EventEmitter<MenuItem>();\n    @Output() closeFloatMenu = new EventEmitter();\n        \n    constructor(private router: Router, private activatedRoute: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const activatedPath = this.router.url.substring(1, this.router.url.length);\n        if (activatedPath === this.menu.url) {\n            this.menuClick.emit(this.menu);\n        }\n\n        this.router.events.subscribe(event => {\n            if (event instanceof ActivationEnd) {\n                if (event.snapshot.component && event.snapshot.firstChild?.url[0] && event.snapshot.firstChild?.url[0].path === this.menu.url) {\n                    this.menu.linkActive = true;\n                    let menu = this.menu;\n                    \n                    while (menu.parent) {\n                        menu.parent.linkActive = true;\n                        menu = menu.parent;\n                    }\n                }\n                else if (this.menu.linkActive && this.menu.children.length === 0) {\n                    this.menu.linkActive = false;\n                    let menu = this.menu;\n                    \n                    while (menu.parent) {\n                        menu.parent.linkActive = false;\n                        menu = menu.parent;\n                    }\n                }\n            }\n        });\n    }\n    \n\n    public click() {\n        this.menuClick.emit(this.menu);\n    }\n\n    public subMenuClick(menu: MenuItem) {\n        this.menuClick.emit(menu);\n    }\n\n    public subMenuCloseFloatMenu() {\n        this.closeFloatMenu.emit();\n    }\n\n    \n    public calculateHeight(menu: MenuItem): number {\n        if (menu.children.length > 0 && menu.selected) {\n            \n            let height = menu.children.length * 45;\n            menu.children.forEach(subMenu => {\n                height += this.calculateHeight(subMenu);\n            });\n\n            const maxHeight = this.calculateMaxHeight() as number;\n\n            return height < maxHeight || this.level > 0 || !this.parentCollapsed\n                ? height\n                : maxHeight ?? height;\n        }\n        return 0;\n    }\n\n    public calculateMarginTop() {\n        if (this.parentCollapsed && (this.menu.floatMenuState === 'opening' || this.menu.floatMenuState === 'show' || this.menu.floatMenuState === 'closing')) {\n            if (this.navItem.nativeElement.offsetTop - this.parentScroll <= this.parentOffsetTop) {\n                //this.closeFloatMenu.emit();\n                return this.parentOffsetTop - this.navItem.nativeElement.offsetTop - 45;\n            }\n            else if (this.navItem.nativeElement.offsetTop + this.calculateHeight(this.menu) - this.parentOffsetTop - this.parentScroll > this.parentOffsetHeight) {\n                //this.closeFloatMenu.emit();\n                return this.parentOffsetTop - this.navItem.nativeElement.offsetTop + this.parentOffsetHeight - this.calculateHeight(this.menu) - 45;\n            }\n            return (this.parentScroll + this.navItem.nativeElement.clientHeight) * -1;\n        }\n        return 0;\n    }\n\n    public calculateMaxHeight(): number | null {\n        return this.parentCollapsed\n            ? this.parentOffsetHeight\n            : null;\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/mixins/navigation/navigation-drawer';\r\n@import '../../../../assets/styles/mixins/no-select';\r\n\r\n@include navigation-item();\r\n@include navigation-item-set-size();\r\n\r\n.nav-item {\r\n    font-size: 0.9rem;\r\n    position: static;\r\n\r\n    &.active .active-item:before {\r\n        width: 4px;\r\n    }\r\n\r\n    &.first-level {\r\n\r\n        > .nav-link {\r\n            z-index: 1;\r\n\r\n            &.has-sub-menu:after, .label {\r\n                opacity: 1;\r\n            }\r\n        }\r\n\r\n        > .nav {\r\n            max-height: 90%;\r\n        }\r\n    }\r\n\r\n    &.menu-collapsed {\r\n        &:not(.menu-first-opened).first-level > .nav-link {\r\n            &.has-sub-menu:after, .label {\r\n                opacity: 0;\r\n            }\r\n\r\n            .icon {\r\n                font-size: 1.3333333333em;\r\n                line-height: 0.75em;\r\n                vertical-align: -0.0667em;\r\n            }\r\n        }\r\n\r\n        &.menu-first-opened .icon {\r\n            font-size: 1.3333333333em;\r\n            line-height: 0.75em;\r\n            vertical-align: -0.0667em;\r\n        }\r\n\r\n        &.first-level {\r\n            > .nav-link {\r\n                text-overflow: clip;\r\n\r\n                &.has-sub-menu:after, .label {\r\n                    opacity: 0;\r\n                }\r\n            }\r\n\r\n            > .nav {\r\n                &:not(.open-float-menu):not(.close-float-menu):not(.show) {\r\n                    height: 0px !important;\r\n                }\r\n\r\n                &.open-float-menu, &.close-float-menu, &.show {\r\n                    position: absolute;\r\n                    width: 150px;\r\n                    border-top-right-radius: 0.4rem;\r\n                    border-bottom-right-radius: 0.4rem;\r\n                    z-index: -1;\r\n                    max-height: inherit;\r\n                }\r\n\r\n                &.show {\r\n                    overflow-y: auto;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &:not(.opened) .nav {\r\n        height: 0px !important;\r\n    }\r\n\r\n    .active-item {\r\n        position: relative;\r\n\r\n        &:before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            width: 0px;\r\n            z-index: 2;\r\n        }\r\n    }\r\n\r\n    .nav-link {\r\n        display: block;\r\n        position: relative;\r\n        font-weight: 600;\r\n        padding: .75rem 1.4rem;\r\n        cursor: pointer;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n\r\n        @include no-select();\r\n\r\n        &.has-sub-menu:after {\r\n            content: \"\\f104\";\r\n            position: absolute;\r\n            font-family: \"Font Awesome 5 Free\";\r\n            font-weight: 900;\r\n            text-align: center;\r\n            width: 1.25em;\r\n            right: .5rem;\r\n            top: .8rem;\r\n        }\r\n\r\n        .item-background {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            z-index: -1;\r\n        }\r\n    }\r\n\r\n    .nav {\r\n        overflow: hidden;\r\n        position: relative;\r\n    }\r\n}\r\n\r\n@media (max-width:768px) {\r\n    .nav-item.menu-expanded.first-level .nav-link {\r\n        &.has-sub-menu:after, .label {\r\n            opacity: 0;\r\n        }\r\n\r\n        .icon {\r\n            font-size: 1.3333333333em;\r\n            line-height: 0.75em;\r\n            vertical-align: -0.0667em;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./navigation-item.component.scss"
                },
                {
                    "data": "@import \"../../../../assets/styles/variables/navigation.theme\";\r\n\r\n@keyframes collapseItem {\r\n    from { text-overflow: ellipsis; }\r\n    to { text-overflow: clip; }\r\n}\r\n\r\n@keyframes expandItem {\r\n    from { text-overflow: clip; }\r\n    to { text-overflow: ellipsis; }\r\n}\r\n\r\n.nav-item {\r\n\r\n    &.first-level > .nav-link {\r\n        &.has-sub-menu:after {\r\n            transition: all $opacity-animation-speed ease;\r\n        }\r\n\r\n        .icon {\r\n            transition: all $icon-animation-speed ease-in-out;\r\n        }\r\n\r\n        .label {\r\n            transition: opacity $opacity-animation-speed ease;\r\n        }\r\n    }\r\n\r\n    &.menu-collapsed {\r\n\r\n        &:not(.menu-first-opened).first-level > .nav-link {\r\n            animation: collapseItem $menu-animation-speed ease-in-out;\r\n            animation-fill-mode: forwards;\r\n        }\r\n\r\n        &.first-level > .nav {\r\n            &.hide {\r\n                transition: height 0s;\r\n            }\r\n\r\n            &.open-float-menu, &.close-float-menu {\r\n                animation-duration: 0.4s;\r\n                animation-timing-function: ease-in-out;;\r\n                animation-fill-mode: forwards;\r\n                transition: height 0s;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.menu-expanded:not(.menu-first-opened).first-level {\r\n\r\n        > .nav-link {\r\n            animation: expandItem $menu-animation-speed ease-in-out;\r\n            animation-fill-mode: forwards;\r\n        }\r\n\r\n        > .nav.open-float-menu {\r\n            animation-duration: $menu-open-close-speed;\r\n            animation-fill-mode: forwards;\r\n        }\r\n    }\r\n\r\n    &.menu-scrolling.nav {\r\n        transition:\r\n            height $menu-open-close-speed ease-in-out,\r\n            margin-top 0s ease-in-out\r\n    }\r\n\r\n    &:not(.menu-first-opened) .nav-link {\r\n        transition: all $menu-hover-speed;\r\n\r\n        &.has-sub-menu:after {\r\n            transition: all $menu-animation-speed ease-in-out;\r\n        }\r\n    }\r\n    \r\n    &.opened  > .nav-link.has-sub-menu:after {\r\n        -webkit-transform: rotate(-90deg);\r\n        -moz-transform: rotate(-90deg);\r\n        -ms-transform: rotate(-90deg);\r\n        -o-transform: rotate(-90deg);\r\n        transform: rotate(-90deg);\r\n    }\r\n\r\n    .active-item:before {\r\n        transition: width $menu-animation-speed linear;\r\n    }\r\n\r\n    .nav {\r\n        transition:\r\n            height $menu-open-close-speed ease-in-out,\r\n            margin-top $menu-open-close-speed ease-in-out;\r\n    }\r\n}",
                    "styleUrl": "./navigation-item.component-animations.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<li class=\"nav-item\" #navItem\n    [class.menu-expanded]=\"!parentCollapsed\"\n    [class.menu-collapsed]=\"parentCollapsed\"\n    [class.menu-scrolling]=\"parentScrolling\"\n    [class.menu-first-opened]=\"firstOpened\"\n\n    [class.first-level]=\"level === 0\"\n\n    [class.active]=\"menu.selected || menu.linkActive\"\n    [class.opened]=\"menu.children.length > 0 && menu.selected\"\n>\n    <div *ngIf=\"level === 0\" class=\"active-item\"></div>\n\n    <a class=\"nav-link replace-content has-sub-menu\"\n        [class.has-sub-menu]=\"menu.children.length > 0\"\n        (click)=\"click()\"\n    >\n        <div class=\"item-background\"></div>\n        <i class=\"icon fa-fw fas fa-{{ menu.icon }}\" *ngIf=\"level === 0\"></i>\n        <span class=\"label ps-2\">{{ menu.label }}</span>\n    </a>\n\n    <ul *ngIf=\"menu.children.length > 0\"\n        class=\"nav flex-column flex-nowrap\"\n        [class.open-float-menu]=\"level === 0 && menu.floatMenuState === 'opening'\"\n        [class.close-float-menu]=\"level === 0 && menu.floatMenuState === 'closing'\"\n        [class.hide]=\"level === 0 && menu.floatMenuState === 'hide'\"\n        [class.show]=\"level === 0 && menu.floatMenuState === 'show'\"\n        [ngStyle]=\"{\n            'height.px': this.calculateHeight(this.menu),\n            'margin-top.px': this.calculateMarginTop(),\n            'max-height.px': this.calculateMaxHeight()\n        }\"\n        >\n        <ng-container *ngFor=\"let subMenu of menu.children\">\n            <zambon-lib-navigation-item\n                [parentCollapsed]=\"parentCollapsed\"\n                [parentScrolling]=\"parentScrolling\"\n                [firstOpened]=\"firstOpened\"\n                [level]=\"level + 1\"\n                [menu]=\"subMenu\"\n                [parentScroll]=\"parentScroll\"\n                [parentOffsetTop]=\"parentOffsetTop\"\n                [parentOffsetHeight]=\"parentOffsetHeight\"\n                (menuClick)=\"subMenuClick($event)\"\n                (closeFloatMenu)=\"subMenuCloseFloatMenu()\"></zambon-lib-navigation-item>\n        </ng-container>\n    </ul>\n</li>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "TabContainerComponent",
            "id": "component-TabContainerComponent-0bc879a5f88844a1e1235f31f812825cbcb1dd4d77d1671ceb379b093da2a3f5c7182643899ae40c34736fb7916a3f8eff8360a359a7e92f5f4f0418d2c316bb",
            "file": "projects/zambon-lib/src/lib/components/tabs/tab-container/tab-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "zambon-lib-tab-container",
            "styleUrls": [
                "./tab-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modalCancelLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "modalConfirmLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "modalMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "modalTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CloseTabModalComponent",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'closeModal'"
                        }
                    ]
                },
                {
                    "name": "subs",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "closeTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forceCloseTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSelectedWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { DragulaService } from 'ng2-dragula';\nimport { Subscription } from 'rxjs';\n\nimport { Tab } from '../../../models/tab';\nimport { CustomReuseStrategy } from '../../../routes/custom-reuse-strategy';\nimport { TabService } from '../../../services/tab.service';\nimport { CloseTabModalComponent } from '../close-tab-modal/close-tab-modal.component';\n\n@Component({\n    selector: 'zambon-lib-tab-container',\n    templateUrl: './tab-container.component.html',\n    styleUrls: ['./tab-container.component.scss']\n})\nexport class TabContainerComponent implements OnDestroy {\n    \n    @Input() modalTitle!: string;\n    @Input() modalMessage!: string;\n    @Input() modalCancelLabel!: string;\n    @Input() modalConfirmLabel!: string;\n    \n    @ViewChild('closeModal') closeModal!: CloseTabModalComponent;\n\n    public get activeTab(): Tab | null {\n        return this.tabService.activeTab;\n    }\n    \n    public get openTabs(): Array<Tab> {\n        return this.tabService.openTabs;\n    }\n    public set openTabs(value: Array<Tab>) {\n        this.tabService.openTabs = value;\n    }\n\n    subs = new Subscription();\n        \n    constructor(\n        private routeReuse: RouteReuseStrategy,\n        private tabService: TabService,\n        private dragulaService: DragulaService\n    ) {\n        if (!this.dragulaService.find('TABS')) {\n            this.dragulaService.createGroup(\"TABS\", {\n                direction: 'horizontal'\n            });\n        }\n\n        this.subs.add(\n            this.tabService.tabOpened.subscribe(url => {\n                (<CustomReuseStrategy>this.routeReuse).storeNewRoute(url);\n            })\n        );\n\n        this.subs.add(\n            this.tabService.tabRedirected.subscribe(urls => {\n                (<CustomReuseStrategy>this.routeReuse).redirectRoute(urls.oldUrl, urls.newUrl);\n            })\n        );\n\n        this.subs.add(\n            this.tabService.tabClosed.subscribe(url => {\n                (<CustomReuseStrategy>this.routeReuse).removeRoute(url);\n            })\n        );\n\n        this.subs.add(\n            this.dragulaService.dragend(\"TABS\")\n                .subscribe(() => {\n                    this.activeTab?.updatePosition();\n                })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this.subs.unsubscribe();\n    }\n\n\n    public setTabActive(tab: Tab | null): void {\n        this.tabService.setTabActive(tab);\n    }\n\n    public closeTab(tab: Tab): void {\n        if (tab.changedValues) {\n            this.closeModal.show(tab);\n        } else {\n            this.tabService.closeTab(tab);\n        }\n    }\n\n    public forceCloseTab(tab: Tab): void {\n        this.tabService.closeTab(tab);\n    }\n\n\n    public getSelectedLeft(): number {\n        return this.activeTab?.x ?? 0;\n    }\n\n    public getSelectedWidth(): number {\n        return this.activeTab?.width ?? 0;\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/mixins/tabs/tabs-container';\r\n// @import \"/src/app/shared/styles/dragula\";\r\n\r\n@include tabs-container();\r\n\r\n.tab-container {\r\n    position: relative;\r\n\r\n    .tabs-nav {\r\n        list-style: none;\r\n    }\r\n\r\n    .selector {\r\n        position: absolute;\r\n        bottom: 0;\r\n        height: 2px;\r\n        left: 0;\r\n        width: 0;\r\n        z-index: 2;\r\n\r\n        transition: all $tab-select-transition-speed ease;\r\n    }\r\n}\r\n\r\n.tab-content {\r\n    margin-top: -1px;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n\r\n    ::ng-deep > *:not(router-outlet) {\r\n        display: flex;\r\n        flex-direction: column;\r\n        flex-grow: 1;\r\n        max-height: 100%;\r\n        height: 100%;\r\n    }\r\n}",
                    "styleUrl": "./tab-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "routeReuse",
                        "type": "RouteReuseStrategy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tabService",
                        "type": "TabService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dragulaService",
                        "type": "DragulaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "routeReuse",
                        "type": "RouteReuseStrategy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tabService",
                        "type": "TabService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dragulaService",
                        "type": "DragulaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "activeTab": {
                    "name": "activeTab",
                    "getSignature": {
                        "name": "activeTab",
                        "type": "",
                        "returnType": "Tab | null",
                        "line": 25
                    }
                },
                "openTabs": {
                    "name": "openTabs",
                    "setSignature": {
                        "name": "openTabs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Array<Tab>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Array<Tab>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "openTabs",
                        "type": "",
                        "returnType": "Array<Tab>",
                        "line": 29
                    }
                }
            },
            "templateData": "<div class=\"tab-container\">\n    <ul class=\"tabs-nav d-flex flex-row p-0 m-0\" dragula=\"TABS\" [(dragulaModel)]=\"openTabs\">\n        <zambon-lib-tab-item *ngFor=\"let tab of openTabs\"\n            [tab]=\"tab\" [isActive]=\"tab === this.activeTab\"\n            (navigated)=\"setTabActive($event)\"\n            (closed)=\"closeTab($event)\"\n        ></zambon-lib-tab-item>\n    </ul>\n\n    <div class=\"selector\"\n        [ngStyle]=\"{\n            'left.px': getSelectedLeft(),\n            'width.px': getSelectedWidth()\n        }\"></div>\n</div>\n\n<div class=\"tab-content d-flex flex-column flex-grow-1 rounded-bottom p-2\" *ngIf=\"openTabs.length > 0\">\n    <ng-content></ng-content>\n</div>\n\n<zambon-lib-close-tab-modal #closeModal (close)=\"forceCloseTab($event)\"\n    [title]=\"modalTitle\"\n    [message]=\"modalMessage\"\n    [cancelLabel]=\"modalCancelLabel\"\n    [confirmLabel]=\"modalConfirmLabel\"\n></zambon-lib-close-tab-modal>"
        },
        {
            "name": "TabItemComponent",
            "id": "component-TabItemComponent-be99f915674584720172defe05e194b46a9cb3e6a1c33e2a958e9e318eaa1fb2d505993c4a595fecb12e8ccc7e0b767dbd91f06d6c0f8c7114d28cb2b13accfb",
            "file": "projects/zambon-lib/src/lib/components/tabs/tab-item/tab-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "zambon-lib-tab-item",
            "styleUrls": [
                "./tab-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Tab",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<Tab>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "navigated",
                    "defaultValue": "new EventEmitter<Tab>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "subs",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tabItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabItem'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Tab } from '../../../models/tab';\n\n@Component({\n  selector: 'zambon-lib-tab-item',\n  templateUrl: './tab-item.component.html',\n  styleUrls: ['./tab-item.component.scss']\n})\nexport class TabItemComponent implements OnInit {\n\n    @Input() tab!: Tab;\n    @Input() isActive!: boolean;\n\n    @ViewChild('tabItem') tabItem!: ElementRef;\n\n    @Output() navigated = new EventEmitter<Tab>();\n    @Output() closed = new EventEmitter<Tab>();\n\n    subs = new Subscription();\n\n    public get hasTitle(): boolean {\n        return this.tab?.view?.title !== undefined;\n    }\n\n\n    constructor() { }\n\n    ngOnInit(): void {\n        this.tab.updatedPosition.subscribe(() => {\n            this.tab.width = this.tabItem.nativeElement.clientWidth;\n            this.tab.x = this.tabItem.nativeElement.offsetLeft + 1;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.subs.unsubscribe();\n    }\n\n\n    itemClick(): void {\n        this.navigated.emit(this.tab);\n    }\n\n    closeClick(): void {\n        this.closed.emit(this.tab);\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/mixins/tabs/tabs-item';\r\n@import \"../../../../assets/styles/mixins/no-select\";\r\n\r\n@include tabs-item();\r\n\r\n.tab-item {\r\n    z-index: 2;\r\n    position: relative;\r\n    opacity: .65;\r\n    font-size: .95rem;\r\n    font-weight: 500;\r\n    max-width: $tab-max-width;\r\n    \r\n    transition: all $tab-select-transition-speed ease;\r\n    \r\n    &.active {\r\n        opacity: 1;\r\n    }\r\n\r\n    &.dragging {\r\n        position: absolute;\r\n    }\r\n    \r\n    &:hover .close {\r\n        opacity: .9;\r\n    }\r\n\r\n    .label {\r\n        padding-right: 1.8rem;\r\n        text-decoration: none;\r\n        font-size: 1rem;\r\n        color: inherit;\r\n        cursor: pointer;\r\n        overflow: hidden;\r\n\r\n        @include no-select();\r\n\r\n        span {\r\n            text-overflow: ellipsis;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        .spinner-border {\r\n            margin: .25rem .25rem .25rem .5rem;\r\n        }\r\n    }\r\n\r\n    .close {\r\n        position: absolute;\r\n        top: .35rem;\r\n        right: .3rem;\r\n        bottom: .35rem;\r\n        padding: .2rem;\r\n        cursor: pointer;\r\n        \r\n        opacity: .5;\r\n        transition: all $tab-select-transition-speed;\r\n    }\r\n}",
                    "styleUrl": "./tab-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "hasTitle": {
                    "name": "hasTitle",
                    "getSignature": {
                        "name": "hasTitle",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23
                    }
                }
            },
            "templateData": "<li #tabItem class=\"tab-item d-flex align-items-center rounded-top\" [class.active]=\"isActive\">\n    <div class=\"label py-2 ps-2 d-flex flex-row align-items-center\" (click)=\"itemClick()\">\n        <div class=\"spinner-border spinner-border-sm me-2\" role=\"status\"\n            *ngIf=\"!this.hasTitle\"\n        >\n            <span class=\"visually-hidden\">Loading...</span>\n        </div>\n\n        <span *ngIf=\"this.hasTitle\">\n            <span *ngIf=\"tab.changedValues\">*</span>\n            {{ tab.view.title ?? '' }}\n            <!-- {{ (tab.view.title ?? '') | translate }} -->\n        </span>\n    </div>\n    \n    <a class=\"close\" (click)=\"closeClick()\">\n        <i class=\"fas fa-times\"></i>\n    </a>\n</li>"
        },
        {
            "name": "TabsContainerStoryComponent",
            "id": "component-TabsContainerStoryComponent-11278c36cd7b1ac1ae4bf9e600de57e2784390a562186089a02181c040cd49f09cae6b099ad0c6b7e682dcd4c717432863847d9ee08e2d23e768907b060aad48",
            "file": "stories/tabs/tabs-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-tabs-container",
            "styleUrls": [
                "./tabs-container-story.component.scss"
            ],
            "styles": [],
            "template": "<!--<div class=\"d-flex box\">\n    <zambon-lib-navigation-drawer #navigation\n        [userName]=\"'Test'\"\n        [userDepartment]=\"'Test department'\"\n        [userImage]=\"null\"\n    >\n    </zambon-lib-navigation-drawer>\n\n    <div class=\"main d-flex flex-grow-1 flex-column\">\n        <div class=\"toolbar position-relative d-flex flex-shrink-0 p-2 align-items-center\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"toggleNavigation()\">\n                <i class=\"fas fa-bars\"></i>\n            </button>\n        </div>\n\n        <div class=\"container-fluid position-relative flex-grow-1 pt-3 pb-2\">\n        </div>\n    </div>\n</div>-->\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { create } from 'domain';\nimport { MenuItem, NavigationDrawerComponent } from 'projects/zambon-lib/src/public-api';\n\n@Component({\n  selector: 'storybook-tabs-container',\n  template: `\n    <!--<div class=\"d-flex box\">\n        <zambon-lib-navigation-drawer #navigation\n            [userName]=\"'Test'\"\n            [userDepartment]=\"'Test department'\"\n            [userImage]=\"null\"\n        >\n        </zambon-lib-navigation-drawer>\n        \n        <div class=\"main d-flex flex-grow-1 flex-column\">\n            <div class=\"toolbar position-relative d-flex flex-shrink-0 p-2 align-items-center\">\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"toggleNavigation()\">\n                    <i class=\"fas fa-bars\"></i>\n                </button>\n            </div>\n\n            <div class=\"container-fluid position-relative flex-grow-1 pt-3 pb-2\">\n            </div>\n        </div>\n    </div>-->\n    `,\n  styleUrls: [ './tabs-container-story.component.scss' ]\n})\nexport default class TabsContainerStoryComponent implements AfterViewInit {\n  //@ViewChild('navigation') navigation!: NavigationDrawerComponent;\n  \n  constructor() {\n    \n  }\n\n  async ngAfterViewInit(): Promise<void> {\n    // const home = this.createMenuItem(1, 'home', 'Home page', '');\n\n    // const security = this.createMenuItem(2, 'user', 'Security');\n    // security.children.push(this.createMenuItem(3, '', 'Users', '1', security));\n    // security.children.push(this.createMenuItem(4, '', 'Roles', '2', security));\n    // security.children.push(this.createMenuItem(5, '', 'Actions', '3', security));\n    \n    // const reports = this.createMenuItem(6, 'file-alt', 'Reports');\n    // reports.children.push(this.createMenuItem(7, '', 'Report A', '4', reports));\n    // reports.children.push(this.createMenuItem(8, '', 'Report B', '5', reports));\n    // reports.children.push(this.createMenuItem(9, '', 'Report C', '6', reports));\n    \n    // this.navigation.menus = [\n    //     home,\n    //     security,\n    //     reports\n    // ];\n  }\n\n\n//   toggleNavigation() {\n//     this.navigation.toggleState();\n//   }\n\n//   private createMenuItem(id: number, icon: string, label: string, url: string | undefined = undefined, parent: MenuItem | null = null) {\n//       const menuItem = new MenuItem();\n\n//       menuItem.id = id;\n//       menuItem.icon = icon;\n//       menuItem.label = label;\n//       menuItem.url = url;\n\n//       menuItem.parent = parent;\n\n//       return menuItem;\n//   }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import '../../projects/zambon-lib/src/assets/styles/mixins/navigation/navigation-drawer';\r\n\r\n// @include navigation-drawer-background(\r\n//     '/assets/images/background.jpg'\r\n// );\r\n\r\n// @include navigation-drawer-logos(\r\n//     '/assets/images/logo_menu_expanded.png',\r\n//     '/assets/images/logo_menu_collapsed.png'\r\n// );\r\n\r\n// //If you require custom navigation size, use the following mixin\r\n// // @include navigation-drawer-set-custom-size(\r\n// //     300px,\r\n// //     100px\r\n// // );\r\n\r\n// /*\r\n\r\n// Workarounds for story page\r\n\r\n// */\r\n// .box {\r\n//     position: absolute;\r\n//     top: 0;\r\n//     bottom: 0;\r\n//     left: 0;\r\n//     right: 0;\r\n    \r\n//     .main {\r\n//         overflow: hidden;\r\n\r\n//         .toolbar {\r\n//             border-bottom: 1px solid darken(white, 15%);\r\n//             font-size: 0.9rem;\r\n//             color: black;\r\n//             z-index: 2;\r\n\r\n//             box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.2), 0 3px 20px 0 rgba(0, 0, 0, 0.19);\r\n//             -webkit-box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.2), 0 3px 20px 0 rgba(0, 0, 0, 0.19);\r\n//             -moz-box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.2), 0 3px 20px 0 rgba(0, 0, 0, 0.19);\r\n//         }\r\n//     }\r\n// }",
                    "styleUrl": "./tabs-container-story.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "AfterViewInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "ComponentsModule",
            "id": "module-ComponentsModule-46b7888596fea565f63dbc706e2894edaa0159a5ef91876f3cc15a53a13532fb7d0ea25a5854ce43c60d5e0c3a723c50e7f22bedd5dc667305c689ee05e3c4e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/zambon-lib/src/lib/components/components.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { LoginModule } from './login/login.module';\nimport { NavigationModule } from './navigation/navigation.module';\nimport { TabsModule } from './tabs/tabs.module';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    CommonModule,\n    LoginModule,\n    NavigationModule,\n    TabsModule\n  ],\n  exports: [\n      LoginModule,\n      NavigationModule,\n      TabsModule\n  ]\n})\nexport class ComponentsModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoginModule"
                        },
                        {
                            "name": "NavigationModule"
                        },
                        {
                            "name": "TabsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginModule"
                        },
                        {
                            "name": "NavigationModule"
                        },
                        {
                            "name": "TabsModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "id": "module-DirectivesModule-1d093c3944a0f8ff8485df39e57af9ef000cf4987b13ef17346473ba0cb6785499ec37747b37d0d1f4a8c84e722f32413d9aefb635e80fc54fdbc89b544f8a1f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/zambon-lib/src/lib/directives/directives.module.ts",
            "methods": [],
            "sourceCode": "import { TrackScrollDirective } from './track-scroll.directive';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [ TrackScrollDirective ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n      TrackScrollDirective\n  ]\n})\nexport class DirectivesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TrackScrollDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TrackScrollDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "I18nModule",
            "id": "module-I18nModule-ec01037bb2a8a19c4723f310f3134fefc2bb37f8c607992f7fcb977e2e0f0552c894aeb37c4dab3b57fcf79ef6242a1ba16f7fa5d071c4fb9905abc467a5f1b2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "languages",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<I18nModule>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "languages",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { Inject, InjectionToken, LOCALE_ID, ModuleWithProviders, NgModule } from '@angular/core';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { TranslateCacheModule, TranslateCacheSettings, TranslateCacheService } from 'ngx-translate-cache';\n\n\nexport const Languages = new InjectionToken<string[]>(\"languages\");\n\n@NgModule({\n    imports: [\n        HttpClientModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: translateLoaderFactory,\n                deps: [HttpClient]\n            }\n        }),\n        TranslateCacheModule.forRoot({\n            cacheService: {\n                provide: TranslateCacheService,\n                useFactory: translateCacheFactory,\n                deps: [TranslateService, TranslateCacheSettings]\n            },\n            cacheMechanism: 'Cookie'\n        })\n    ],\n    providers: [\n        { provide: LOCALE_ID, deps: [TranslateService], useFactory: (ts: TranslateService) => ts.currentLang }\n    ],\n    exports: [TranslateModule]\n})\nexport class I18nModule {\n\n    constructor(@Inject(Languages) languages: string[], translate: TranslateService, translateCacheService: TranslateCacheService) {\n        translateCacheService.init();\n        \n        translate.addLangs(languages);\n        translate.setDefaultLang(languages[0]);\n\n        const browserLang = translateCacheService.getCachedLanguage() || translate.getBrowserLang();\n        translate.use(languages.includes(browserLang) ? browserLang : languages[0]);\n    }\n\n    static forRoot(languages?: string[]): ModuleWithProviders<I18nModule> {\n        return {\n            ngModule: I18nModule,\n            providers: [ { provide: Languages, useValue: languages } ]\n        }\n    }\n}\n\nexport function translateLoaderFactory(httpClient: HttpClient) {\n    return new TranslateHttpLoader(httpClient);\n}\n\nexport function translateCacheFactory(translateService: TranslateService, translateCacheSettings: TranslateCacheSettings) {\n    return new TranslateCacheService(translateService, translateCacheSettings);\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-9ae69da7e88ce2d355568bc80a0a246ad2e9a255b1addb837440dea76487220eaf56f546d017f94967df9d063c911f2c6655dd82a45521fd1f6201ea130b1ab8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/zambon-lib/src/lib/components/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { TranslateModule } from '@ngx-translate/core';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginInputComponent } from './login-input/login-input.component';\nimport { LoginLanguageDropdownComponent } from './login-language-dropdown/login-language-dropdown.component';\n\n\n@NgModule({\n  declarations: [\n    LoginInputComponent,\n    LoginLanguageDropdownComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule\n  ],\n  exports: [\n    LoginInputComponent,\n    LoginLanguageDropdownComponent\n  ]\n})\nexport class LoginModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginInputComponent"
                        },
                        {
                            "name": "LoginLanguageDropdownComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginInputComponent"
                        },
                        {
                            "name": "LoginLanguageDropdownComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavigationModule",
            "id": "module-NavigationModule-eaf1196dc0f7834e1d06f76304b38ffdf96e1fbc9f339ace96fe62b1cf5358642df03e3d0d0470ad780ba55848fe80c03a48db0dba23806a136d2868d459dd64",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/zambon-lib/src/lib/components/navigation/navigation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DirectivesModule } from '../../directives/directives.module';\nimport { NavigationDrawerComponent } from './navigation-drawer/navigation-drawer.component';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\n\n\n@NgModule({\n  declarations: [\n      NavigationDrawerComponent,\n      NavigationItemComponent\n  ],\n  imports: [\n    CommonModule,\n    DirectivesModule\n  ],\n  exports: [\n    NavigationDrawerComponent,\n    NavigationItemComponent\n  ]\n})\nexport class NavigationModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavigationDrawerComponent"
                        },
                        {
                            "name": "NavigationItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DirectivesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavigationDrawerComponent"
                        },
                        {
                            "name": "NavigationItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-350cce51ddf905494eb73256cb7cfb9b0c5905637750d1190b1da51cd0d98fe9b5575c05e680759251b48565850f113e560c084c121ae99e4fe6dcca9e037fed",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/zambon-lib/src/lib/components/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TabContainerComponent } from './tab-container/tab-container.component';\nimport { CloseTabModalComponent } from './close-tab-modal/close-tab-modal.component';\nimport { TabItemComponent } from './tab-item/tab-item.component';\nimport { DragulaModule } from 'ng2-dragula';\n\n\n@NgModule({\n  declarations: [\n    CloseTabModalComponent,\n    TabContainerComponent,\n    TabItemComponent\n  ],\n  imports: [\n    CommonModule,\n    DragulaModule.forRoot()\n  ],\n  exports: [\n    CloseTabModalComponent,\n    TabContainerComponent,\n    TabItemComponent\n  ]\n})\nexport class TabsModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CloseTabModalComponent"
                        },
                        {
                            "name": "TabContainerComponent"
                        },
                        {
                            "name": "TabItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CloseTabModalComponent"
                        },
                        {
                            "name": "TabContainerComponent"
                        },
                        {
                            "name": "TabItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ZambonLibModule",
            "id": "module-ZambonLibModule-00a6f3650ab3a08f280ebf13e7c024d4fec9a72a8a0c635a211afecc3053e914b168ab694d8255cf4653d2889a5f0d1263a302294df583544f00022627dd3144",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/zambon-lib/src/lib/zambon-lib.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ComponentsModule } from './components/components.module';\r\nimport { I18nModule } from './i18n/i18n.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n      CommonModule,\r\n      I18nModule,\r\n      ComponentsModule,\r\n  ],\r\n  exports: [\r\n    I18nModule,\r\n    ComponentsModule\r\n  ]\r\n})\r\nexport class ZambonLibModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "I18nModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "I18nModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/login/login-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/login/login-language-dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/navigation/navigation-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/tabs/tabs-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Languages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string[]>(\"languages\")"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/login/login-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoginInputStoryComponent>",
                "defaultValue": "(args: LoginInputStoryComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/login/login-language-dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoginLanguageInputDropdownStoryComponent>",
                "defaultValue": "(args: LoginLanguageInputDropdownStoryComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/navigation/navigation-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NavigationDrawerStoryComponent>",
                "defaultValue": "(args: NavigationDrawerStoryComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/tabs/tabs-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabsContainerStoryComponent>",
                "defaultValue": "(args: TabsContainerStoryComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "translateCacheFactory",
                "file": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateCacheSettings",
                        "type": "TranslateCacheSettings",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateCacheSettings",
                        "type": "TranslateCacheSettings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "translateLoaderFactory",
                "file": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "stories/login/login-input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/login/login-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/login/login-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoginInputStoryComponent>",
                    "defaultValue": "(args: LoginInputStoryComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/login/login-language-dropdown.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/login/login-language-dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/login/login-language-dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoginLanguageInputDropdownStoryComponent>",
                    "defaultValue": "(args: LoginLanguageInputDropdownStoryComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/navigation/navigation-drawer.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/navigation/navigation-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/navigation/navigation-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NavigationDrawerStoryComponent>",
                    "defaultValue": "(args: NavigationDrawerStoryComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/tabs/tabs-container.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/tabs/tabs-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/tabs/tabs-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabsContainerStoryComponent>",
                    "defaultValue": "(args: TabsContainerStoryComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/zambon-lib/src/lib/i18n/i18n.module.ts": [
                {
                    "name": "Languages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string[]>(\"languages\")"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "projects/zambon-lib/src/lib/i18n/i18n.module.ts": [
                {
                    "name": "translateCacheFactory",
                    "file": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "translateService",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "translateCacheSettings",
                            "type": "TranslateCacheSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "translateService",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "translateCacheSettings",
                            "type": "TranslateCacheSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateLoaderFactory",
                    "file": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpClient",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpClient",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/zambon-lib/src/lib/components/login/login-input/login-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/components/login/login-language-dropdown/login-language-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginLanguageDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/components/navigation/navigation-drawer/navigation-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/components/navigation/navigation-item/navigation-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/components/tabs/close-tab-modal/close-tab-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CloseTabModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/components/tabs/tab-container/tab-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/components/tabs/tab-item/tab-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/directives/track-scroll.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TrackScrollDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "translateCacheFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "translateLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/i18n/i18n.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Languages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/interfaces/ibase-view.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseView",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/models/menu-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/models/tab.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Tab",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/routes/custom-reuse-strategy.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomReuseStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/routes/custom-reuse-strategy.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouteStorageObject",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/zambon-lib/src/lib/services/tab.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TabService",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/login/login-input-story.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginInputStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "stories/login/login-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/login/login-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/login/login-language-dropdown-story.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginLanguageInputDropdownStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/login/login-language-dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/login/login-language-dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/navigation/navigation-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationDrawerStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/navigation/navigation-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/navigation/navigation-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/tabs/tabs-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsContainerStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/tabs/tabs-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/tabs/tabs-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}